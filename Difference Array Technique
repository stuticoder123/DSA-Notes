The Difference Array Technique is a method used in algorithms to efficiently handle range updates and point queries. This technique is often discussed in the context of competitive programming and data structures.
The technique involves maintaining a difference array where each element represents the difference between consecutive elements of the original array. This allows for efficient updates and queries on ranges within
the array.
 
Intuition Behind Difference Array Technique : It is used to efficiently handle range update queries where we increment or decrement values in a subarray in constant time ( O(1) ).
Understanding the Intuition :
Given an array arr[] of size ( n ), we want to efficiently process multiple queries of the form :
[L, R, x] → x Add to all elements in range [L, R] including L and R

Brute Force Approach (Inefficient) : 
- We would iterate from index L to R and increment each element by x.
- Time Complexity per query: ( O(R - L + 1) )
- For Q queries, worst-case complexity: ( O(Q . N) ) → Too slow! where N is the size of an array and Q is the no. of queries.

Efficient Approach Using Difference Array : Instead of modifying each element individually, we use a difference array ( diff[] ) to store only changes at specific indices.
Difference Array Definition : 
- Define diff[] such that : diff[i] = arr[i] - arr[i - 1] (where ( arr[i] ) is the original array)
- Processing the Query [L, R, x]: Instead of looping from L to R , we do:
  diff[L] += x (Start incrementing from L)
  diff[R+1] -= x (Stop incrementing after R) (if ( R+1 < n ), i.e., within array bounds)

Why Does This Work? : 
- When we compute the prefix sum of the diff[] , it propagates the updates to the entire array.
- Each addition at L starts increasing values from that index onward.
- Each subtraction at R+1 cancels out the addition beyond R .

For example - Given Array : arr[] = [0, 0, 0, 0, 0]   (n = 5)
Queries :
1. [1, 3, 10] → Add 10 to indices 1 to 3
2. [2, 4, 5] → Add 5 to indices 2 to 4

Step 1: Initialize diff[] : diff[] = [0, 0, 0, 0, 0, 0]   (Size n+1 to handle R+1)
Step 2: Apply Queries : 
1. Apply [1,3,10]
   diff[1] += 10   → diff = [0, 10, 0, 0, 0, 0]
   diff[4] -= 10   → diff = [0, 10, 0, 0, -10, 0]
2. Apply [2,4,5]
   diff[2] += 5    → diff = [0, 10, 5, 0, -10, 0]
   diff[5] -= 5    → diff = [0, 10, 5, 0, -10, -5]
Step 3: Compute Final arr[] Using Prefix Sum
1. Convert `diff[]` to arr[] using prefix sum : becoming an array of cumulative sum
arr[0] = diff[0]  = 0
arr[1] = arr[0] + diff[1]  = 0 + 10  = 10
arr[2] = arr[1] + diff[2]  = 10 + 5  = 15
arr[3] = arr[2] + diff[3]  = 15 + 0  = 15
arr[4] = arr[3] + diff[4]  = 15 - 10 = 5

Final Updated Array : arr[] = [0, 10, 15, 15, 5] which will be the same if we update the normal array with the queries of [left,right,k] such that we can update or decrement k from each query from left to right till the existing queries.

 Time Complexity Analysis : - Applying each query → ( O(1) )
                            - Computing final array (Prefix Sum) → ( O(N) )
                            - Total for Q queries → ( O(N + Q) ) (Much better than ( O(N . Q) ))

 Key Takeaways : ✅ Efficient Range Updates: Instead of modifying each element, store changes in a difference array.  
                 ✅ Constant Time Updates: Each update is done in ( O(1) ), no matter the size of the range.  
                 ✅ Final Array Computation: Use a prefix sum to reconstruct the updated array in ( O(N) ).  
Some questions regarding this concept : Leetcode 370
                                        Leetcode 2381
                                        Leetcode 3356
